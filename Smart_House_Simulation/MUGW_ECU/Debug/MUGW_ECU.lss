
MUGW_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000952  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800078  00800078  000009fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000a70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b81  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc0  00000000  00000000  00002809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f6  00000000  00000000  000033c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a8  00000000  00000000  000047c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ea  00000000  00000000  00004c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015cb  00000000  00000000  00005452  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006a1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__vector_10>
  2c:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 43 01 	call	0x286	; 0x286 <main>
  8a:	0c 94 a7 04 	jmp	0x94e	; 0x94e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <RES_Date_and_Time>:

}

void RES_Date_and_Time(uint8 res)
{
	setclock_msg[j]=res;
  92:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
  96:	e9 2f       	mov	r30, r25
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	e7 58       	subi	r30, 0x87	; 135
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	80 83       	st	Z, r24
	j++;
  a0:	9f 5f       	subi	r25, 0xFF	; 255
  a2:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <__data_end>
  a6:	08 95       	ret

000000a8 <DIO_void_SetPinDirection>:
#include "DIO.h"

// Set pin direction (INPUT/OUTPUT).
void DIO_void_SetPinDirection(uint8 port, uint8 pin, uint8 dir)
{
	switch(port){
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	01 f1       	breq	.+64     	; 0xec <DIO_void_SetPinDirection+0x44>
  ac:	30 f0       	brcs	.+12     	; 0xba <DIO_void_SetPinDirection+0x12>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	b1 f1       	breq	.+108    	; 0x11e <DIO_void_SetPinDirection+0x76>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	09 f4       	brne	.+2      	; 0xb8 <DIO_void_SetPinDirection+0x10>
  b6:	4c c0       	rjmp	.+152    	; 0x150 <DIO_void_SetPinDirection+0xa8>
  b8:	08 95       	ret
		
		// Port A
		case 0:
		// pin is input.
		if(dir == 0)
  ba:	41 11       	cpse	r20, r1
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <DIO_void_SetPinDirection+0x2e>
		{
			CLR_BIT(DDRA, pin);
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_void_SetPinDirection+0x22>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_void_SetPinDirection+0x1e>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
		}
		
		// pin is output.
		else
		{
			SET_BIT(DDRA, pin);
  d6:	2a b3       	in	r18, 0x1a	; 26
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_void_SetPinDirection+0x3a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_void_SetPinDirection+0x36>
  e6:	82 2b       	or	r24, r18
  e8:	8a bb       	out	0x1a, r24	; 26
  ea:	08 95       	ret
		}
		break;
		
		// Port B
		case 1:
		if(dir == 0)
  ec:	41 11       	cpse	r20, r1
  ee:	0c c0       	rjmp	.+24     	; 0x108 <DIO_void_SetPinDirection+0x60>
		{
			CLR_BIT(DDRB, pin);
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_void_SetPinDirection+0x54>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_void_SetPinDirection+0x50>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
		}
		else
		{
			SET_BIT(DDRB, pin);
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_void_SetPinDirection+0x6c>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_void_SetPinDirection+0x68>
 118:	82 2b       	or	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
		}
		break;
		
		// Port C
		case 2:
		if(dir == 0)
 11e:	41 11       	cpse	r20, r1
 120:	0c c0       	rjmp	.+24     	; 0x13a <DIO_void_SetPinDirection+0x92>
		{
			CLR_BIT(DDRC, pin);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_void_SetPinDirection+0x86>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_void_SetPinDirection+0x82>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
		}
		else
		{
			SET_BIT(DDRC, pin);
 13a:	24 b3       	in	r18, 0x14	; 20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_void_SetPinDirection+0x9e>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_void_SetPinDirection+0x9a>
 14a:	82 2b       	or	r24, r18
 14c:	84 bb       	out	0x14, r24	; 20
 14e:	08 95       	ret
		}
		break;
		
		// Port D
		case 3:
		if(dir == 0)
 150:	41 11       	cpse	r20, r1
 152:	0c c0       	rjmp	.+24     	; 0x16c <DIO_void_SetPinDirection+0xc4>
		{
			CLR_BIT(DDRD, pin);
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_void_SetPinDirection+0xb8>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_void_SetPinDirection+0xb4>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret
		}
		else
		{
			SET_BIT(DDRD, pin);
 16c:	21 b3       	in	r18, 0x11	; 17
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_void_SetPinDirection+0xd0>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_void_SetPinDirection+0xcc>
 17c:	82 2b       	or	r24, r18
 17e:	81 bb       	out	0x11, r24	; 17
 180:	08 95       	ret

00000182 <I2C_Init>:

#include "I2C_Master.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
 182:	11 b8       	out	0x01, r1	; 1
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	80 b9       	out	0x00, r24	; 0
 188:	08 95       	ret

0000018a <I2C_Start>:


uint8_t I2C_Start(char write_address)						/* I2C start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 18a:	94 ea       	ldi	r25, 0xA4	; 164
 18c:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 18e:	06 b6       	in	r0, 0x36	; 54
 190:	07 fe       	sbrs	r0, 7
 192:	fd cf       	rjmp	.-6      	; 0x18e <I2C_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 194:	91 b1       	in	r25, 0x01	; 1
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
 196:	98 7f       	andi	r25, 0xF8	; 248
 198:	98 30       	cpi	r25, 0x08	; 8
 19a:	71 f4       	brne	.+28     	; 0x1b8 <I2C_Start+0x2e>
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
 19c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 19e:	84 e8       	ldi	r24, 0x84	; 132
 1a0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 1a2:	06 b6       	in	r0, 0x36	; 54
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <I2C_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 1a8:	81 b1       	in	r24, 0x01	; 1
 1aa:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
 1ac:	88 31       	cpi	r24, 0x18	; 24
 1ae:	31 f0       	breq	.+12     	; 0x1bc <I2C_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
 1b0:	80 32       	cpi	r24, 0x20	; 32
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <I2C_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
	return 0;												/* If not then return 0 to indicate start condition fail */
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 1c0:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 1c2:	08 95       	ret

000001c4 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 1c4:	94 ea       	ldi	r25, 0xA4	; 164
 1c6:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 1c8:	06 b6       	in	r0, 0x36	; 54
 1ca:	07 fe       	sbrs	r0, 7
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <I2C_Repeated_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 1ce:	91 b1       	in	r25, 0x01	; 1
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
 1d0:	98 7f       	andi	r25, 0xF8	; 248
 1d2:	90 31       	cpi	r25, 0x10	; 16
 1d4:	71 f4       	brne	.+28     	; 0x1f2 <I2C_Repeated_Start+0x2e>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
 1d6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 1d8:	84 e8       	ldi	r24, 0x84	; 132
 1da:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 1dc:	06 b6       	in	r0, 0x36	; 54
 1de:	07 fe       	sbrs	r0, 7
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <I2C_Repeated_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 1e2:	81 b1       	in	r24, 0x01	; 1
 1e4:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
 1e6:	80 34       	cpi	r24, 0x40	; 64
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <I2C_Repeated_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received */
	if (status == 0x48)										/* Check weather SLA+R transmitted & nack received or not? */
 1ea:	88 34       	cpi	r24, 0x48	; 72
 1ec:	31 f0       	breq	.+12     	; 0x1fa <I2C_Repeated_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+R failed */
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret
	if (status == 0x48)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 1fa:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+R failed */
}
 1fc:	08 95       	ret

000001fe <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 1fe:	84 e9       	ldi	r24, 0x94	; 148
 200:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */
 202:	06 b6       	in	r0, 0x36	; 54
 204:	04 fc       	sbrc	r0, 4
 206:	fd cf       	rjmp	.-6      	; 0x202 <I2C_Stop+0x4>
}
 208:	08 95       	ret

0000020a <I2C_Start_Wait>:

void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	18 2f       	mov	r17, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 212:	c4 ea       	ldi	r28, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 214:	d4 e8       	ldi	r29, 0x84	; 132
void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 216:	c6 bf       	out	0x36, r28	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
 218:	06 b6       	in	r0, 0x36	; 54
 21a:	07 fe       	sbrs	r0, 7
 21c:	fd cf       	rjmp	.-6      	; 0x218 <I2C_Start_Wait+0xe>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 21e:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
 220:	88 7f       	andi	r24, 0xF8	; 248
 222:	88 30       	cpi	r24, 0x08	; 8
 224:	c1 f7       	brne	.-16     	; 0x216 <I2C_Start_Wait+0xc>
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
 226:	13 b9       	out	0x03, r17	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 228:	d6 bf       	out	0x36, r29	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
 22a:	06 b6       	in	r0, 0x36	; 54
 22c:	07 fe       	sbrs	r0, 7
 22e:	fd cf       	rjmp	.-6      	; 0x22a <I2C_Start_Wait+0x20>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 230:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
 232:	88 7f       	andi	r24, 0xF8	; 248
 234:	88 31       	cpi	r24, 0x18	; 24
 236:	19 f0       	breq	.+6      	; 0x23e <I2C_Start_Wait+0x34>
		{
			I2C_Stop();										/* If not then generate stop condition */
 238:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Stop>
			continue;										/* continue with start loop again */
 23c:	ec cf       	rjmp	.-40     	; 0x216 <I2C_Start_Wait+0xc>
		}
		break;												/* If yes then break loop */
	}
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	08 95       	ret

00000246 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 246:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 248:	84 e8       	ldi	r24, 0x84	; 132
 24a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 24c:	06 b6       	in	r0, 0x36	; 54
 24e:	07 fe       	sbrs	r0, 7
 250:	fd cf       	rjmp	.-6      	; 0x24c <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 252:	81 b1       	in	r24, 0x01	; 1
 254:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 256:	88 32       	cpi	r24, 0x28	; 40
 258:	21 f0       	breq	.+8      	; 0x262 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 25a:	80 33       	cpi	r24, 0x30	; 48
 25c:	21 f0       	breq	.+8      	; 0x266 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
 266:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
 268:	08 95       	ret

0000026a <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 26a:	84 ec       	ldi	r24, 0xC4	; 196
 26c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 26e:	06 b6       	in	r0, 0x36	; 54
 270:	07 fe       	sbrs	r0, 7
 272:	fd cf       	rjmp	.-6      	; 0x26e <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
 274:	83 b1       	in	r24, 0x03	; 3
}
 276:	08 95       	ret

00000278 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 278:	84 e8       	ldi	r24, 0x84	; 132
 27a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 27c:	06 b6       	in	r0, 0x36	; 54
 27e:	07 fe       	sbrs	r0, 7
 280:	fd cf       	rjmp	.-6      	; 0x27c <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
 282:	83 b1       	in	r24, 0x03	; 3
}
 284:	08 95       	ret

00000286 <main>:
	//TIM0_voidSetRegister(238);
	//TIM0_voidSetCallBack(second);
	
	
	uint8 wrongpass=2;
	mugwoptions_void_selftest();
 286:	0e 94 4b 01 	call	0x296	; 0x296 <mugwoptions_void_selftest>
	//_delay_ms(300);
	mugwoptions_void_securityaccess(wrongpass);
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 a2 02 	call	0x544	; 0x544 <mugwoptions_void_securityaccess>
	//{
		
	//}
	

}
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	08 95       	ret

00000296 <mugwoptions_void_selftest>:

void mugwoptions_void_viewcal()
{
	//LCD_void_WriteString("Date/Time");
	_delay_ms(300);
	mugwoptions_void_homepage();
 296:	cf 92       	push	r12
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	2c 97       	sbiw	r28, 0x0c	; 12
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	0e 94 75 04 	call	0x8ea	; 0x8ea <UART_voidInit>
 2ba:	0e 94 c1 00 	call	0x182	; 0x182 <I2C_Init>
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	6c 01       	movw	r12, r24
 2c4:	7e 01       	movw	r14, r28
 2c6:	97 e0       	ldi	r25, 0x07	; 7
 2c8:	e9 0e       	add	r14, r25
 2ca:	f1 1c       	adc	r15, r1
 2cc:	86 01       	movw	r16, r12
 2ce:	0e 94 8a 04 	call	0x914	; 0x914 <UART_uint8RecChar>
 2d2:	f8 01       	movw	r30, r16
 2d4:	81 93       	st	Z+, r24
 2d6:	8f 01       	movw	r16, r30
 2d8:	ff e7       	ldi	r31, 0x7F	; 127
 2da:	28 e3       	ldi	r18, 0x38	; 56
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	f1 50       	subi	r31, 0x01	; 1
 2e0:	20 40       	sbci	r18, 0x00	; 0
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <mugwoptions_void_selftest+0x48>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <mugwoptions_void_selftest+0x52>
 2e8:	00 00       	nop
 2ea:	e0 16       	cp	r14, r16
 2ec:	f1 06       	cpc	r15, r17
 2ee:	79 f7       	brne	.-34     	; 0x2ce <mugwoptions_void_selftest+0x38>
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	81 36       	cpi	r24, 0x61	; 97
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <mugwoptions_void_selftest+0x62>
 2f6:	56 c0       	rjmp	.+172    	; 0x3a4 <mugwoptions_void_selftest+0x10e>
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	81 36       	cpi	r24, 0x61	; 97
 2fc:	09 f0       	breq	.+2      	; 0x300 <mugwoptions_void_selftest+0x6a>
 2fe:	52 c0       	rjmp	.+164    	; 0x3a4 <mugwoptions_void_selftest+0x10e>
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	80 33       	cpi	r24, 0x30	; 48
 304:	09 f0       	breq	.+2      	; 0x308 <mugwoptions_void_selftest+0x72>
 306:	4e c0       	rjmp	.+156    	; 0x3a4 <mugwoptions_void_selftest+0x10e>
 308:	8c 81       	ldd	r24, Y+4	; 0x04
 30a:	80 33       	cpi	r24, 0x30	; 48
 30c:	09 f0       	breq	.+2      	; 0x310 <mugwoptions_void_selftest+0x7a>
 30e:	4a c0       	rjmp	.+148    	; 0x3a4 <mugwoptions_void_selftest+0x10e>
 310:	8d 81       	ldd	r24, Y+5	; 0x05
 312:	85 33       	cpi	r24, 0x35	; 53
 314:	09 f0       	breq	.+2      	; 0x318 <mugwoptions_void_selftest+0x82>
 316:	46 c0       	rjmp	.+140    	; 0x3a4 <mugwoptions_void_selftest+0x10e>
 318:	8e 81       	ldd	r24, Y+6	; 0x06
 31a:	85 33       	cpi	r24, 0x35	; 53
 31c:	09 f0       	breq	.+2      	; 0x320 <mugwoptions_void_selftest+0x8a>
 31e:	42 c0       	rjmp	.+132    	; 0x3a4 <mugwoptions_void_selftest+0x10e>
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Start_Wait>
 326:	ef e0       	ldi	r30, 0x0F	; 15
 328:	f7 e2       	ldi	r31, 0x27	; 39
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <mugwoptions_void_selftest+0x94>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <mugwoptions_void_selftest+0x9a>
 330:	00 00       	nop
 332:	f6 01       	movw	r30, r12
 334:	81 91       	ld	r24, Z+
 336:	6f 01       	movw	r12, r30
 338:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Write>
 33c:	ff e7       	ldi	r31, 0x7F	; 127
 33e:	28 e3       	ldi	r18, 0x38	; 56
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	f1 50       	subi	r31, 0x01	; 1
 344:	20 40       	sbci	r18, 0x00	; 0
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <mugwoptions_void_selftest+0xac>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <mugwoptions_void_selftest+0xb6>
 34c:	00 00       	nop
 34e:	ce 14       	cp	r12, r14
 350:	df 04       	cpc	r13, r15
 352:	79 f7       	brne	.-34     	; 0x332 <mugwoptions_void_selftest+0x9c>
 354:	81 e2       	ldi	r24, 0x21	; 33
 356:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Repeated_Start>
 35a:	ef e0       	ldi	r30, 0x0F	; 15
 35c:	f7 e2       	ldi	r31, 0x27	; 39
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <mugwoptions_void_selftest+0xc8>
 362:	00 c0       	rjmp	.+0      	; 0x364 <mugwoptions_void_selftest+0xce>
 364:	00 00       	nop
 366:	7e 01       	movw	r14, r28
 368:	f6 e0       	ldi	r31, 0x06	; 6
 36a:	ef 0e       	add	r14, r31
 36c:	f1 1c       	adc	r15, r1
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	17 30       	cpi	r17, 0x07	; 7
 372:	28 f4       	brcc	.+10     	; 0x37e <mugwoptions_void_selftest+0xe8>
 374:	0e 94 35 01 	call	0x26a	; 0x26a <I2C_Read_Ack>
 378:	f7 01       	movw	r30, r14
 37a:	80 83       	st	Z, r24
 37c:	04 c0       	rjmp	.+8      	; 0x386 <mugwoptions_void_selftest+0xf0>
 37e:	0e 94 3c 01 	call	0x278	; 0x278 <I2C_Read_Nack>
 382:	f7 01       	movw	r30, r14
 384:	80 83       	st	Z, r24
 386:	ff e7       	ldi	r31, 0x7F	; 127
 388:	28 e3       	ldi	r18, 0x38	; 56
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	f1 50       	subi	r31, 0x01	; 1
 38e:	20 40       	sbci	r18, 0x00	; 0
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <mugwoptions_void_selftest+0xf6>
 394:	00 c0       	rjmp	.+0      	; 0x396 <mugwoptions_void_selftest+0x100>
 396:	00 00       	nop
 398:	1f 5f       	subi	r17, 0xFF	; 255
 39a:	9f ef       	ldi	r25, 0xFF	; 255
 39c:	e9 1a       	sub	r14, r25
 39e:	f9 0a       	sbc	r15, r25
 3a0:	17 30       	cpi	r17, 0x07	; 7
 3a2:	31 f7       	brne	.-52     	; 0x370 <mugwoptions_void_selftest+0xda>
 3a4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Stop>
 3a8:	8f 81       	ldd	r24, Y+7	; 0x07
 3aa:	81 36       	cpi	r24, 0x61	; 97
 3ac:	39 f5       	brne	.+78     	; 0x3fc <mugwoptions_void_selftest+0x166>
 3ae:	88 85       	ldd	r24, Y+8	; 0x08
 3b0:	81 36       	cpi	r24, 0x61	; 97
 3b2:	21 f5       	brne	.+72     	; 0x3fc <mugwoptions_void_selftest+0x166>
 3b4:	89 85       	ldd	r24, Y+9	; 0x09
 3b6:	80 33       	cpi	r24, 0x30	; 48
 3b8:	09 f5       	brne	.+66     	; 0x3fc <mugwoptions_void_selftest+0x166>
 3ba:	8a 85       	ldd	r24, Y+10	; 0x0a
 3bc:	80 33       	cpi	r24, 0x30	; 48
 3be:	f1 f4       	brne	.+60     	; 0x3fc <mugwoptions_void_selftest+0x166>
 3c0:	8b 85       	ldd	r24, Y+11	; 0x0b
 3c2:	85 33       	cpi	r24, 0x35	; 53
 3c4:	d9 f4       	brne	.+54     	; 0x3fc <mugwoptions_void_selftest+0x166>
 3c6:	8c 85       	ldd	r24, Y+12	; 0x0c
 3c8:	85 33       	cpi	r24, 0x35	; 53
 3ca:	c1 f4       	brne	.+48     	; 0x3fc <mugwoptions_void_selftest+0x166>
 3cc:	8e 01       	movw	r16, r28
 3ce:	09 5f       	subi	r16, 0xF9	; 249
 3d0:	1f 4f       	sbci	r17, 0xFF	; 255
 3d2:	7e 01       	movw	r14, r28
 3d4:	ed e0       	ldi	r30, 0x0D	; 13
 3d6:	ee 0e       	add	r14, r30
 3d8:	f1 1c       	adc	r15, r1
 3da:	f8 01       	movw	r30, r16
 3dc:	81 91       	ld	r24, Z+
 3de:	8f 01       	movw	r16, r30
 3e0:	0e 94 86 04 	call	0x90c	; 0x90c <UART_voidSendChar>
 3e4:	ff ef       	ldi	r31, 0xFF	; 255
 3e6:	22 e5       	ldi	r18, 0x52	; 82
 3e8:	87 e0       	ldi	r24, 0x07	; 7
 3ea:	f1 50       	subi	r31, 0x01	; 1
 3ec:	20 40       	sbci	r18, 0x00	; 0
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <mugwoptions_void_selftest+0x154>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <mugwoptions_void_selftest+0x15e>
 3f4:	00 00       	nop
 3f6:	e0 16       	cp	r14, r16
 3f8:	f1 06       	cpc	r15, r17
 3fa:	79 f7       	brne	.-34     	; 0x3da <mugwoptions_void_selftest+0x144>
 3fc:	2c 96       	adiw	r28, 0x0c	; 12
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	08 95       	ret

0000041a <mugwoptions_void_setcal>:
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	ec 01       	movw	r28, r24
 424:	8c 01       	movw	r16, r24
 426:	0c 5e       	subi	r16, 0xEC	; 236
 428:	1f 4f       	sbci	r17, 0xFF	; 255
 42a:	89 91       	ld	r24, Y+
 42c:	0e 94 49 00 	call	0x92	; 0x92 <RES_Date_and_Time>
 430:	c0 17       	cp	r28, r16
 432:	d1 07       	cpc	r29, r17
 434:	d1 f7       	brne	.-12     	; 0x42a <mugwoptions_void_setcal+0x10>
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	08 95       	ret

00000440 <mugwoptions_void_RGB>:
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	8c 01       	movw	r16, r24
 44a:	80 e2       	ldi	r24, 0x20	; 32
 44c:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
 450:	8f e0       	ldi	r24, 0x0F	; 15
 452:	97 e2       	ldi	r25, 0x27	; 39
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <mugwoptions_void_RGB+0x14>
 458:	00 c0       	rjmp	.+0      	; 0x45a <mugwoptions_void_RGB+0x1a>
 45a:	00 00       	nop
 45c:	e8 01       	movw	r28, r16
 45e:	0c 5e       	subi	r16, 0xEC	; 236
 460:	1f 4f       	sbci	r17, 0xFF	; 255
 462:	89 91       	ld	r24, Y+
 464:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Write>
 468:	9f e7       	ldi	r25, 0x7F	; 127
 46a:	28 e3       	ldi	r18, 0x38	; 56
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	91 50       	subi	r25, 0x01	; 1
 470:	20 40       	sbci	r18, 0x00	; 0
 472:	80 40       	sbci	r24, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <mugwoptions_void_RGB+0x2e>
 476:	00 c0       	rjmp	.+0      	; 0x478 <mugwoptions_void_RGB+0x38>
 478:	00 00       	nop
 47a:	c0 17       	cp	r28, r16
 47c:	d1 07       	cpc	r29, r17
 47e:	89 f7       	brne	.-30     	; 0x462 <mugwoptions_void_RGB+0x22>
 480:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Stop>
 484:	0e 94 49 02 	call	0x492	; 0x492 <mugwoptions_void_homepage>
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	08 95       	ret

00000492 <mugwoptions_void_homepage>:
 492:	ef 92       	push	r14
 494:	ff 92       	push	r15
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	64 97       	sbiw	r28, 0x14	; 20
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	8e 01       	movw	r16, r28
 4b0:	0f 5f       	subi	r16, 0xFF	; 255
 4b2:	1f 4f       	sbci	r17, 0xFF	; 255
 4b4:	7e 01       	movw	r14, r28
 4b6:	25 e1       	ldi	r18, 0x15	; 21
 4b8:	e2 0e       	add	r14, r18
 4ba:	f1 1c       	adc	r15, r1
 4bc:	0e 94 8a 04 	call	0x914	; 0x914 <UART_uint8RecChar>
 4c0:	f8 01       	movw	r30, r16
 4c2:	81 93       	st	Z+, r24
 4c4:	8f 01       	movw	r16, r30
 4c6:	ff e7       	ldi	r31, 0x7F	; 127
 4c8:	28 e3       	ldi	r18, 0x38	; 56
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	f1 50       	subi	r31, 0x01	; 1
 4ce:	20 40       	sbci	r18, 0x00	; 0
 4d0:	80 40       	sbci	r24, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <mugwoptions_void_homepage+0x3a>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <mugwoptions_void_homepage+0x44>
 4d6:	00 00       	nop
 4d8:	0e 15       	cp	r16, r14
 4da:	1f 05       	cpc	r17, r15
 4dc:	79 f7       	brne	.-34     	; 0x4bc <mugwoptions_void_homepage+0x2a>
 4de:	8c 81       	ldd	r24, Y+4	; 0x04
 4e0:	88 33       	cpi	r24, 0x38	; 56
 4e2:	81 f0       	breq	.+32     	; 0x504 <mugwoptions_void_homepage+0x72>
 4e4:	28 f4       	brcc	.+10     	; 0x4f0 <mugwoptions_void_homepage+0x5e>
 4e6:	83 33       	cpi	r24, 0x33	; 51
 4e8:	41 f0       	breq	.+16     	; 0x4fa <mugwoptions_void_homepage+0x68>
 4ea:	85 33       	cpi	r24, 0x35	; 53
 4ec:	81 f0       	breq	.+32     	; 0x50e <mugwoptions_void_homepage+0x7c>
 4ee:	1d c0       	rjmp	.+58     	; 0x52a <mugwoptions_void_homepage+0x98>
 4f0:	89 33       	cpi	r24, 0x39	; 57
 4f2:	91 f0       	breq	.+36     	; 0x518 <mugwoptions_void_homepage+0x86>
 4f4:	83 36       	cpi	r24, 0x63	; 99
 4f6:	a9 f0       	breq	.+42     	; 0x522 <mugwoptions_void_homepage+0x90>
 4f8:	18 c0       	rjmp	.+48     	; 0x52a <mugwoptions_void_homepage+0x98>
 4fa:	ce 01       	movw	r24, r28
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	0e 94 bb 03 	call	0x776	; 0x776 <mugwoptions_void_changepasskey>
 502:	13 c0       	rjmp	.+38     	; 0x52a <mugwoptions_void_homepage+0x98>
 504:	ce 01       	movw	r24, r28
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	0e 94 d5 03 	call	0x7aa	; 0x7aa <mugwoptions_void_tempcontrol>
 50c:	0e c0       	rjmp	.+28     	; 0x52a <mugwoptions_void_homepage+0x98>
 50e:	ce 01       	movw	r24, r28
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	0e 94 0d 02 	call	0x41a	; 0x41a <mugwoptions_void_setcal>
 516:	09 c0       	rjmp	.+18     	; 0x52a <mugwoptions_void_homepage+0x98>
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <mugwoptions_void_doors>
 520:	04 c0       	rjmp	.+8      	; 0x52a <mugwoptions_void_homepage+0x98>
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	0e 94 20 02 	call	0x440	; 0x440 <mugwoptions_void_RGB>
 52a:	64 96       	adiw	r28, 0x14	; 20
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	08 95       	ret

00000544 <mugwoptions_void_securityaccess>:
 544:	bf 92       	push	r11
 546:	cf 92       	push	r12
 548:	df 92       	push	r13
 54a:	ef 92       	push	r14
 54c:	ff 92       	push	r15
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	ae 97       	sbiw	r28, 0x2e	; 46
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	b8 2e       	mov	r11, r24
 568:	41 e0       	ldi	r20, 0x01	; 1
 56a:	64 e0       	ldi	r22, 0x04	; 4
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_void_SetPinDirection>
 572:	88 e0       	ldi	r24, 0x08	; 8
 574:	e0 e6       	ldi	r30, 0x60	; 96
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	de 01       	movw	r26, r28
 57a:	51 96       	adiw	r26, 0x11	; 17
 57c:	01 90       	ld	r0, Z+
 57e:	0d 92       	st	X+, r0
 580:	8a 95       	dec	r24
 582:	e1 f7       	brne	.-8      	; 0x57c <mugwoptions_void_securityaccess+0x38>
 584:	88 e0       	ldi	r24, 0x08	; 8
 586:	e8 e6       	ldi	r30, 0x68	; 104
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	de 01       	movw	r26, r28
 58c:	59 96       	adiw	r26, 0x19	; 25
 58e:	01 90       	ld	r0, Z+
 590:	0d 92       	st	X+, r0
 592:	8a 95       	dec	r24
 594:	e1 f7       	brne	.-8      	; 0x58e <mugwoptions_void_securityaccess+0x4a>
 596:	88 e0       	ldi	r24, 0x08	; 8
 598:	e0 e7       	ldi	r30, 0x70	; 112
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	de 01       	movw	r26, r28
 59e:	91 96       	adiw	r26, 0x21	; 33
 5a0:	01 90       	ld	r0, Z+
 5a2:	0d 92       	st	X+, r0
 5a4:	8a 95       	dec	r24
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <mugwoptions_void_securityaccess+0x5c>
 5a8:	8e 01       	movw	r16, r28
 5aa:	0f 5f       	subi	r16, 0xFF	; 255
 5ac:	1f 4f       	sbci	r17, 0xFF	; 255
 5ae:	6e 01       	movw	r12, r28
 5b0:	21 e1       	ldi	r18, 0x11	; 17
 5b2:	c2 0e       	add	r12, r18
 5b4:	d1 1c       	adc	r13, r1
 5b6:	78 01       	movw	r14, r16
 5b8:	0e 94 8a 04 	call	0x914	; 0x914 <UART_uint8RecChar>
 5bc:	f7 01       	movw	r30, r14
 5be:	81 93       	st	Z+, r24
 5c0:	7f 01       	movw	r14, r30
 5c2:	ff e7       	ldi	r31, 0x7F	; 127
 5c4:	28 e3       	ldi	r18, 0x38	; 56
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	f1 50       	subi	r31, 0x01	; 1
 5ca:	20 40       	sbci	r18, 0x00	; 0
 5cc:	80 40       	sbci	r24, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <mugwoptions_void_securityaccess+0x84>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <mugwoptions_void_securityaccess+0x8e>
 5d2:	00 00       	nop
 5d4:	ce 14       	cp	r12, r14
 5d6:	df 04       	cpc	r13, r15
 5d8:	79 f7       	brne	.-34     	; 0x5b8 <mugwoptions_void_securityaccess+0x74>
 5da:	9e 01       	movw	r18, r28
 5dc:	22 5f       	subi	r18, 0xF2	; 242
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	f8 01       	movw	r30, r16
 5e2:	83 81       	ldd	r24, Z+3	; 0x03
 5e4:	81 93       	st	Z+, r24
 5e6:	8f 01       	movw	r16, r30
 5e8:	2e 17       	cp	r18, r30
 5ea:	3f 07       	cpc	r19, r31
 5ec:	c9 f7       	brne	.-14     	; 0x5e0 <mugwoptions_void_securityaccess+0x9c>
 5ee:	7e 01       	movw	r14, r28
 5f0:	f9 e2       	ldi	r31, 0x29	; 41
 5f2:	ef 0e       	add	r14, r31
 5f4:	f1 1c       	adc	r15, r1
 5f6:	00 e4       	ldi	r16, 0x40	; 64
 5f8:	10 e0       	ldi	r17, 0x00	; 0
 5fa:	c8 01       	movw	r24, r16
 5fc:	0e 94 8e 04 	call	0x91c	; 0x91c <eeprom_read_byte>
 600:	f7 01       	movw	r30, r14
 602:	81 93       	st	Z+, r24
 604:	7f 01       	movw	r14, r30
 606:	0f 5f       	subi	r16, 0xFF	; 255
 608:	1f 4f       	sbci	r17, 0xFF	; 255
 60a:	06 34       	cpi	r16, 0x46	; 70
 60c:	11 05       	cpc	r17, r1
 60e:	a9 f7       	brne	.-22     	; 0x5fa <mugwoptions_void_securityaccess+0xb6>
 610:	8e 81       	ldd	r24, Y+6	; 0x06
 612:	80 33       	cpi	r24, 0x30	; 48
 614:	51 f5       	brne	.+84     	; 0x66a <mugwoptions_void_securityaccess+0x126>
 616:	9f 81       	ldd	r25, Y+7	; 0x07
 618:	90 33       	cpi	r25, 0x30	; 48
 61a:	39 f5       	brne	.+78     	; 0x66a <mugwoptions_void_securityaccess+0x126>
 61c:	98 85       	ldd	r25, Y+8	; 0x08
 61e:	90 33       	cpi	r25, 0x30	; 48
 620:	21 f5       	brne	.+72     	; 0x66a <mugwoptions_void_securityaccess+0x126>
 622:	99 85       	ldd	r25, Y+9	; 0x09
 624:	90 33       	cpi	r25, 0x30	; 48
 626:	09 f5       	brne	.+66     	; 0x66a <mugwoptions_void_securityaccess+0x126>
 628:	9a 85       	ldd	r25, Y+10	; 0x0a
 62a:	90 33       	cpi	r25, 0x30	; 48
 62c:	f1 f4       	brne	.+60     	; 0x66a <mugwoptions_void_securityaccess+0x126>
 62e:	9b 85       	ldd	r25, Y+11	; 0x0b
 630:	90 33       	cpi	r25, 0x30	; 48
 632:	d9 f4       	brne	.+54     	; 0x66a <mugwoptions_void_securityaccess+0x126>
 634:	8e 01       	movw	r16, r28
 636:	0f 5e       	subi	r16, 0xEF	; 239
 638:	1f 4f       	sbci	r17, 0xFF	; 255
 63a:	7e 01       	movw	r14, r28
 63c:	f9 e1       	ldi	r31, 0x19	; 25
 63e:	ef 0e       	add	r14, r31
 640:	f1 1c       	adc	r15, r1
 642:	f8 01       	movw	r30, r16
 644:	81 91       	ld	r24, Z+
 646:	8f 01       	movw	r16, r30
 648:	0e 94 86 04 	call	0x90c	; 0x90c <UART_voidSendChar>
 64c:	ff e7       	ldi	r31, 0x7F	; 127
 64e:	28 e3       	ldi	r18, 0x38	; 56
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	f1 50       	subi	r31, 0x01	; 1
 654:	20 40       	sbci	r18, 0x00	; 0
 656:	80 40       	sbci	r24, 0x00	; 0
 658:	e1 f7       	brne	.-8      	; 0x652 <mugwoptions_void_securityaccess+0x10e>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <mugwoptions_void_securityaccess+0x118>
 65c:	00 00       	nop
 65e:	e0 16       	cp	r14, r16
 660:	f1 06       	cpc	r15, r17
 662:	79 f7       	brne	.-34     	; 0x642 <mugwoptions_void_securityaccess+0xfe>
 664:	0e 94 49 02 	call	0x492	; 0x492 <mugwoptions_void_homepage>
 668:	76 c0       	rjmp	.+236    	; 0x756 <mugwoptions_void_securityaccess+0x212>
 66a:	99 a5       	ldd	r25, Y+41	; 0x29
 66c:	89 13       	cpse	r24, r25
 66e:	70 c0       	rjmp	.+224    	; 0x750 <mugwoptions_void_securityaccess+0x20c>
 670:	9f 81       	ldd	r25, Y+7	; 0x07
 672:	8a a5       	ldd	r24, Y+42	; 0x2a
 674:	98 13       	cpse	r25, r24
 676:	2b c0       	rjmp	.+86     	; 0x6ce <mugwoptions_void_securityaccess+0x18a>
 678:	98 85       	ldd	r25, Y+8	; 0x08
 67a:	8b a5       	ldd	r24, Y+43	; 0x2b
 67c:	98 13       	cpse	r25, r24
 67e:	27 c0       	rjmp	.+78     	; 0x6ce <mugwoptions_void_securityaccess+0x18a>
 680:	99 85       	ldd	r25, Y+9	; 0x09
 682:	8c a5       	ldd	r24, Y+44	; 0x2c
 684:	98 13       	cpse	r25, r24
 686:	23 c0       	rjmp	.+70     	; 0x6ce <mugwoptions_void_securityaccess+0x18a>
 688:	9a 85       	ldd	r25, Y+10	; 0x0a
 68a:	8d a5       	ldd	r24, Y+45	; 0x2d
 68c:	98 13       	cpse	r25, r24
 68e:	1f c0       	rjmp	.+62     	; 0x6ce <mugwoptions_void_securityaccess+0x18a>
 690:	9b 85       	ldd	r25, Y+11	; 0x0b
 692:	8e a5       	ldd	r24, Y+46	; 0x2e
 694:	98 13       	cpse	r25, r24
 696:	1b c0       	rjmp	.+54     	; 0x6ce <mugwoptions_void_securityaccess+0x18a>
 698:	8e 01       	movw	r16, r28
 69a:	0f 5e       	subi	r16, 0xEF	; 239
 69c:	1f 4f       	sbci	r17, 0xFF	; 255
 69e:	7e 01       	movw	r14, r28
 6a0:	99 e1       	ldi	r25, 0x19	; 25
 6a2:	e9 0e       	add	r14, r25
 6a4:	f1 1c       	adc	r15, r1
 6a6:	f8 01       	movw	r30, r16
 6a8:	81 91       	ld	r24, Z+
 6aa:	8f 01       	movw	r16, r30
 6ac:	0e 94 86 04 	call	0x90c	; 0x90c <UART_voidSendChar>
 6b0:	ff e7       	ldi	r31, 0x7F	; 127
 6b2:	28 e3       	ldi	r18, 0x38	; 56
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	f1 50       	subi	r31, 0x01	; 1
 6b8:	20 40       	sbci	r18, 0x00	; 0
 6ba:	80 40       	sbci	r24, 0x00	; 0
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <mugwoptions_void_securityaccess+0x172>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <mugwoptions_void_securityaccess+0x17c>
 6c0:	00 00       	nop
 6c2:	e0 16       	cp	r14, r16
 6c4:	f1 06       	cpc	r15, r17
 6c6:	79 f7       	brne	.-34     	; 0x6a6 <mugwoptions_void_securityaccess+0x162>
 6c8:	0e 94 49 02 	call	0x492	; 0x492 <mugwoptions_void_homepage>
 6cc:	44 c0       	rjmp	.+136    	; 0x756 <mugwoptions_void_securityaccess+0x212>
 6ce:	bb 20       	and	r11, r11
 6d0:	31 f1       	breq	.+76     	; 0x71e <mugwoptions_void_securityaccess+0x1da>
 6d2:	8e 01       	movw	r16, r28
 6d4:	07 5e       	subi	r16, 0xE7	; 231
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	7e 01       	movw	r14, r28
 6da:	91 e2       	ldi	r25, 0x21	; 33
 6dc:	e9 0e       	add	r14, r25
 6de:	f1 1c       	adc	r15, r1
 6e0:	f8 01       	movw	r30, r16
 6e2:	81 91       	ld	r24, Z+
 6e4:	8f 01       	movw	r16, r30
 6e6:	0e 94 86 04 	call	0x90c	; 0x90c <UART_voidSendChar>
 6ea:	ff e7       	ldi	r31, 0x7F	; 127
 6ec:	28 e3       	ldi	r18, 0x38	; 56
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	f1 50       	subi	r31, 0x01	; 1
 6f2:	20 40       	sbci	r18, 0x00	; 0
 6f4:	80 40       	sbci	r24, 0x00	; 0
 6f6:	e1 f7       	brne	.-8      	; 0x6f0 <mugwoptions_void_securityaccess+0x1ac>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <mugwoptions_void_securityaccess+0x1b6>
 6fa:	00 00       	nop
 6fc:	e0 16       	cp	r14, r16
 6fe:	f1 06       	cpc	r15, r17
 700:	79 f7       	brne	.-34     	; 0x6e0 <mugwoptions_void_securityaccess+0x19c>
 702:	9f ef       	ldi	r25, 0xFF	; 255
 704:	e4 e3       	ldi	r30, 0x34	; 52
 706:	fc e0       	ldi	r31, 0x0C	; 12
 708:	91 50       	subi	r25, 0x01	; 1
 70a:	e0 40       	sbci	r30, 0x00	; 0
 70c:	f0 40       	sbci	r31, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <mugwoptions_void_securityaccess+0x1c4>
 710:	00 c0       	rjmp	.+0      	; 0x712 <mugwoptions_void_securityaccess+0x1ce>
 712:	00 00       	nop
 714:	8f ef       	ldi	r24, 0xFF	; 255
 716:	8b 0d       	add	r24, r11
 718:	0e 94 a2 02 	call	0x544	; 0x544 <mugwoptions_void_securityaccess>
 71c:	1c c0       	rjmp	.+56     	; 0x756 <mugwoptions_void_securityaccess+0x212>
 71e:	8e 01       	movw	r16, r28
 720:	0f 5d       	subi	r16, 0xDF	; 223
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	7e 01       	movw	r14, r28
 726:	29 e2       	ldi	r18, 0x29	; 41
 728:	e2 0e       	add	r14, r18
 72a:	f1 1c       	adc	r15, r1
 72c:	f8 01       	movw	r30, r16
 72e:	81 91       	ld	r24, Z+
 730:	8f 01       	movw	r16, r30
 732:	0e 94 86 04 	call	0x90c	; 0x90c <UART_voidSendChar>
 736:	ff e7       	ldi	r31, 0x7F	; 127
 738:	28 e3       	ldi	r18, 0x38	; 56
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	f1 50       	subi	r31, 0x01	; 1
 73e:	20 40       	sbci	r18, 0x00	; 0
 740:	80 40       	sbci	r24, 0x00	; 0
 742:	e1 f7       	brne	.-8      	; 0x73c <mugwoptions_void_securityaccess+0x1f8>
 744:	00 c0       	rjmp	.+0      	; 0x746 <mugwoptions_void_securityaccess+0x202>
 746:	00 00       	nop
 748:	0e 15       	cp	r16, r14
 74a:	1f 05       	cpc	r17, r15
 74c:	79 f7       	brne	.-34     	; 0x72c <mugwoptions_void_securityaccess+0x1e8>
 74e:	03 c0       	rjmp	.+6      	; 0x756 <mugwoptions_void_securityaccess+0x212>
 750:	b1 10       	cpse	r11, r1
 752:	bf cf       	rjmp	.-130    	; 0x6d2 <mugwoptions_void_securityaccess+0x18e>
 754:	e4 cf       	rjmp	.-56     	; 0x71e <mugwoptions_void_securityaccess+0x1da>
 756:	ae 96       	adiw	r28, 0x2e	; 46
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	f8 94       	cli
 75c:	de bf       	out	0x3e, r29	; 62
 75e:	0f be       	out	0x3f, r0	; 63
 760:	cd bf       	out	0x3d, r28	; 61
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	cf 90       	pop	r12
 772:	bf 90       	pop	r11
 774:	08 95       	ret

00000776 <mugwoptions_void_changepasskey>:
 776:	0f 93       	push	r16
 778:	1f 93       	push	r17
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	8c 01       	movw	r16, r24
 780:	0b 5f       	subi	r16, 0xFB	; 251
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	c0 e4       	ldi	r28, 0x40	; 64
 786:	d0 e0       	ldi	r29, 0x00	; 0
 788:	f8 01       	movw	r30, r16
 78a:	61 91       	ld	r22, Z+
 78c:	8f 01       	movw	r16, r30
 78e:	ce 01       	movw	r24, r28
 790:	0e 94 96 04 	call	0x92c	; 0x92c <eeprom_update_byte>
 794:	21 96       	adiw	r28, 0x01	; 1
 796:	c6 34       	cpi	r28, 0x46	; 70
 798:	d1 05       	cpc	r29, r1
 79a:	b1 f7       	brne	.-20     	; 0x788 <mugwoptions_void_changepasskey+0x12>
 79c:	0e 94 49 02 	call	0x492	; 0x492 <mugwoptions_void_homepage>
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	08 95       	ret

000007aa <mugwoptions_void_tempcontrol>:
 7aa:	0f 93       	push	r16
 7ac:	1f 93       	push	r17
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	8c 01       	movw	r16, r24
 7b4:	80 e2       	ldi	r24, 0x20	; 32
 7b6:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
 7ba:	8f e0       	ldi	r24, 0x0F	; 15
 7bc:	97 e2       	ldi	r25, 0x27	; 39
 7be:	01 97       	sbiw	r24, 0x01	; 1
 7c0:	f1 f7       	brne	.-4      	; 0x7be <mugwoptions_void_tempcontrol+0x14>
 7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <mugwoptions_void_tempcontrol+0x1a>
 7c4:	00 00       	nop
 7c6:	e8 01       	movw	r28, r16
 7c8:	0c 5e       	subi	r16, 0xEC	; 236
 7ca:	1f 4f       	sbci	r17, 0xFF	; 255
 7cc:	89 91       	ld	r24, Y+
 7ce:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Write>
 7d2:	9f e7       	ldi	r25, 0x7F	; 127
 7d4:	28 e3       	ldi	r18, 0x38	; 56
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	91 50       	subi	r25, 0x01	; 1
 7da:	20 40       	sbci	r18, 0x00	; 0
 7dc:	80 40       	sbci	r24, 0x00	; 0
 7de:	e1 f7       	brne	.-8      	; 0x7d8 <mugwoptions_void_tempcontrol+0x2e>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <mugwoptions_void_tempcontrol+0x38>
 7e2:	00 00       	nop
 7e4:	c0 17       	cp	r28, r16
 7e6:	d1 07       	cpc	r29, r17
 7e8:	89 f7       	brne	.-30     	; 0x7cc <mugwoptions_void_tempcontrol+0x22>
 7ea:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Stop>
 7ee:	0e 94 49 02 	call	0x492	; 0x492 <mugwoptions_void_homepage>
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	1f 91       	pop	r17
 7f8:	0f 91       	pop	r16
 7fa:	08 95       	ret

000007fc <mugwoptions_void_doors>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mugwoptions_void_doors(uint8 doorcontrol[])
{
 7fc:	0f 93       	push	r16
 7fe:	1f 93       	push	r17
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	8c 01       	movw	r16, r24
	uint8 i;
	//uint8 i2cad_buffer;
	I2C_Start(Slave_Write_Address);
 806:	80 e2       	ldi	r24, 0x20	; 32
 808:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 80c:	8f e0       	ldi	r24, 0x0F	; 15
 80e:	97 e2       	ldi	r25, 0x27	; 39
 810:	01 97       	sbiw	r24, 0x01	; 1
 812:	f1 f7       	brne	.-4      	; 0x810 <mugwoptions_void_doors+0x14>
 814:	00 c0       	rjmp	.+0      	; 0x816 <mugwoptions_void_doors+0x1a>
 816:	00 00       	nop
 818:	e8 01       	movw	r28, r16
 81a:	0c 5e       	subi	r16, 0xEC	; 236
 81c:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_ms(5);
	for (i=0; i<20; i++)
	{
		I2C_Write(doorcontrol[i]);
 81e:	89 91       	ld	r24, Y+
 820:	0e 94 23 01 	call	0x246	; 0x246 <I2C_Write>
 824:	9f e7       	ldi	r25, 0x7F	; 127
 826:	28 e3       	ldi	r18, 0x38	; 56
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	91 50       	subi	r25, 0x01	; 1
 82c:	20 40       	sbci	r18, 0x00	; 0
 82e:	80 40       	sbci	r24, 0x00	; 0
 830:	e1 f7       	brne	.-8      	; 0x82a <mugwoptions_void_doors+0x2e>
 832:	00 c0       	rjmp	.+0      	; 0x834 <mugwoptions_void_doors+0x38>
 834:	00 00       	nop
{
	uint8 i;
	//uint8 i2cad_buffer;
	I2C_Start(Slave_Write_Address);
	_delay_ms(5);
	for (i=0; i<20; i++)
 836:	c0 17       	cp	r28, r16
 838:	d1 07       	cpc	r29, r17
 83a:	89 f7       	brne	.-30     	; 0x81e <mugwoptions_void_doors+0x22>
	{
		I2C_Write(doorcontrol[i]);
		_delay_ms(50);
	}
	I2C_Stop();
 83c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Stop>
	mugwoptions_void_homepage();
 840:	0e 94 49 02 	call	0x492	; 0x492 <mugwoptions_void_homepage>
}
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	1f 91       	pop	r17
 84a:	0f 91       	pop	r16
 84c:	08 95       	ret

0000084e <__vector_11>:
	TIM0_CallBack();
}

void TIM0_voidSetCallBack_CTC(void (*Copy_ptr) (void))
{
	TIM0_CallBack_CTC = Copy_ptr;
 84e:	1f 92       	push	r1
 850:	0f 92       	push	r0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	0f 92       	push	r0
 856:	11 24       	eor	r1, r1
 858:	2f 93       	push	r18
 85a:	3f 93       	push	r19
 85c:	4f 93       	push	r20
 85e:	5f 93       	push	r21
 860:	6f 93       	push	r22
 862:	7f 93       	push	r23
 864:	8f 93       	push	r24
 866:	9f 93       	push	r25
 868:	af 93       	push	r26
 86a:	bf 93       	push	r27
 86c:	ef 93       	push	r30
 86e:	ff 93       	push	r31
 870:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <TIM0_CallBack>
 874:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <TIM0_CallBack+0x1>
 878:	09 95       	icall
 87a:	ff 91       	pop	r31
 87c:	ef 91       	pop	r30
 87e:	bf 91       	pop	r27
 880:	af 91       	pop	r26
 882:	9f 91       	pop	r25
 884:	8f 91       	pop	r24
 886:	7f 91       	pop	r23
 888:	6f 91       	pop	r22
 88a:	5f 91       	pop	r21
 88c:	4f 91       	pop	r20
 88e:	3f 91       	pop	r19
 890:	2f 91       	pop	r18
 892:	0f 90       	pop	r0
 894:	0f be       	out	0x3f, r0	; 63
 896:	0f 90       	pop	r0
 898:	1f 90       	pop	r1
 89a:	18 95       	reti

0000089c <__vector_10>:
}

void __vector_10(void) __attribute__((signal,used));
void __vector_10(void)
{
 89c:	1f 92       	push	r1
 89e:	0f 92       	push	r0
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	0f 92       	push	r0
 8a4:	11 24       	eor	r1, r1
 8a6:	2f 93       	push	r18
 8a8:	3f 93       	push	r19
 8aa:	4f 93       	push	r20
 8ac:	5f 93       	push	r21
 8ae:	6f 93       	push	r22
 8b0:	7f 93       	push	r23
 8b2:	8f 93       	push	r24
 8b4:	9f 93       	push	r25
 8b6:	af 93       	push	r26
 8b8:	bf 93       	push	r27
 8ba:	ef 93       	push	r30
 8bc:	ff 93       	push	r31
	TIM0_CallBack_CTC();
 8be:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <TIM0_CallBack_CTC>
 8c2:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <TIM0_CallBack_CTC+0x1>
 8c6:	09 95       	icall
}
 8c8:	ff 91       	pop	r31
 8ca:	ef 91       	pop	r30
 8cc:	bf 91       	pop	r27
 8ce:	af 91       	pop	r26
 8d0:	9f 91       	pop	r25
 8d2:	8f 91       	pop	r24
 8d4:	7f 91       	pop	r23
 8d6:	6f 91       	pop	r22
 8d8:	5f 91       	pop	r21
 8da:	4f 91       	pop	r20
 8dc:	3f 91       	pop	r19
 8de:	2f 91       	pop	r18
 8e0:	0f 90       	pop	r0
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	0f 90       	pop	r0
 8e6:	1f 90       	pop	r1
 8e8:	18 95       	reti

000008ea <UART_voidInit>:


void UART_voidInit()
{
	//INT
	SET_BIT(SREG,7);
 8ea:	8f b7       	in	r24, 0x3f	; 63
 8ec:	80 68       	ori	r24, 0x80	; 128
 8ee:	8f bf       	out	0x3f, r24	; 63
	
	//REG A
	CLR_BIT(UCSRA,1);
 8f0:	59 98       	cbi	0x0b, 1	; 11
	CLR_BIT(UCSRA,0);
 8f2:	58 98       	cbi	0x0b, 0	; 11
	
	//REG B
	SET_BIT(UCSRB,7);
 8f4:	57 9a       	sbi	0x0a, 7	; 10
	CLR_BIT(UCSRB,6);
 8f6:	56 98       	cbi	0x0a, 6	; 10
	CLR_BIT(UCSRB,5);
 8f8:	55 98       	cbi	0x0a, 5	; 10
	SET_BIT(UCSRB,4);
 8fa:	54 9a       	sbi	0x0a, 4	; 10
	SET_BIT(UCSRB,3);
 8fc:	53 9a       	sbi	0x0a, 3	; 10
	CLR_BIT(UCSRB,2);
 8fe:	52 98       	cbi	0x0a, 2	; 10
	
	//REG C
	UCSRC=0b10000110;
 900:	86 e8       	ldi	r24, 0x86	; 134
 902:	80 bd       	out	0x20, r24	; 32
	
	
	UBRRH = 0x00;
 904:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
 906:	83 e3       	ldi	r24, 0x33	; 51
 908:	89 b9       	out	0x09, r24	; 9
 90a:	08 95       	ret

0000090c <UART_voidSendChar>:

}

void UART_voidSendChar(uint8 byte)
{
	while(GET_BIT(UCSRA,5)==0);
 90c:	5d 9b       	sbis	0x0b, 5	; 11
 90e:	fe cf       	rjmp	.-4      	; 0x90c <UART_voidSendChar>
	UDR = byte;
 910:	8c b9       	out	0x0c, r24	; 12
 912:	08 95       	ret

00000914 <UART_uint8RecChar>:
}

uint8 UART_uint8RecChar(void)
{
	uint8 Value;
	while (GET_BIT(UCSRA,7)==0);
 914:	5f 9b       	sbis	0x0b, 7	; 11
 916:	fe cf       	rjmp	.-4      	; 0x914 <UART_uint8RecChar>
	Value=UDR;
 918:	8c b1       	in	r24, 0x0c	; 12
	return Value;
}
 91a:	08 95       	ret

0000091c <eeprom_read_byte>:
 91c:	e1 99       	sbic	0x1c, 1	; 28
 91e:	fe cf       	rjmp	.-4      	; 0x91c <eeprom_read_byte>
 920:	9f bb       	out	0x1f, r25	; 31
 922:	8e bb       	out	0x1e, r24	; 30
 924:	e0 9a       	sbi	0x1c, 0	; 28
 926:	99 27       	eor	r25, r25
 928:	8d b3       	in	r24, 0x1d	; 29
 92a:	08 95       	ret

0000092c <eeprom_update_byte>:
 92c:	26 2f       	mov	r18, r22

0000092e <eeprom_update_r18>:
 92e:	e1 99       	sbic	0x1c, 1	; 28
 930:	fe cf       	rjmp	.-4      	; 0x92e <eeprom_update_r18>
 932:	9f bb       	out	0x1f, r25	; 31
 934:	8e bb       	out	0x1e, r24	; 30
 936:	e0 9a       	sbi	0x1c, 0	; 28
 938:	01 97       	sbiw	r24, 0x01	; 1
 93a:	0d b2       	in	r0, 0x1d	; 29
 93c:	02 16       	cp	r0, r18
 93e:	31 f0       	breq	.+12     	; 0x94c <eeprom_update_r18+0x1e>
 940:	2d bb       	out	0x1d, r18	; 29
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	f8 94       	cli
 946:	e2 9a       	sbi	0x1c, 2	; 28
 948:	e1 9a       	sbi	0x1c, 1	; 28
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	08 95       	ret

0000094e <_exit>:
 94e:	f8 94       	cli

00000950 <__stop_program>:
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stop_program>
